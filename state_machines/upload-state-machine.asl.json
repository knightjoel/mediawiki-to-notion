{
  "Comment": "A state machine to upload blocks to Notion. The state machine facilitates concurrency control of the worker Lambda by way of a shared lock/semaphore: the state machine will not proceed unless and until it's able to acquire the lock. Once the lock is acquired, the state machine invokes the Lambda function to upload blocks to Notion. The function works on a specific batch of blocks, and once that batch is processed, the state machine exits. The locking architecture is from https://aws.amazon.com/blogs/compute/controlling-concurrency-in-distributed-systems-using-aws-step-functions/.",
  "StartAt": "Acquire Lock",
  "States": {
    "Acquire Lock": {
      "Comment": "Acquire a lock using a conditional update to DynamoDB. This update will do two things: 1) increment a counter for the number of held locks and 2) add an attribute to the DynamoDB Item with a unique key for this execution and with a value of the time when the lock was Acquired. The Update includes a conditional expression that will fail under two circumstances: 1) if the maximum number of locks have already been distributed or 2) if the current execution already owns a lock. The latter check is important to ensure the same execution doesn't increase the counter more than once. If either of these conditions are not met, then the task will fail with a DynamoDB.ConditionalCheckFailedException error, retry a few times, then if it is still not successful, it will move off to another branch of the workflow. If this is the first time that a given lockname has been used, there will not be a row in DynamoDB, so the update will fail with DynamoDB.AmazonDynamoDBException. In that case, this state sends the workflow to state that will create that row to initialize.",
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${TableSemaphore}",
        "Key": {
          "LockName": {
            "S": "${LockName}"
          }
        },
        "ExpressionAttributeNames": {
          "#currentlockcount": "currentlockcount",
          "#lockownerid.$": "$$.Execution.Id"
        },
        "ExpressionAttributeValues": {
          ":increase": {
            "N": "1"
          },
          ":limit": {
            "N": "${ConcurrentAccessLimit}"
          },
          ":lockacquiredtime": {
            "S.$": "$$.State.EnteredTime"
          }
        },
        "UpdateExpression": "SET #currentlockcount = #currentlockcount + :increase, #lockownerid = :lockacquiredtime",
        "ConditionExpression": "currentlockcount <> :limit and attribute_not_exists(#lockownerid)",
        "ReturnValues": "UPDATED_NEW"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "DynamoDB.AmazonDynamoDBException"
          ],
          "MaxAttempts": 0
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "DynamoDB.AmazonDynamoDBException"
          ],
          "Next": "Initialize Lock Item",
          "ResultPath": "$.lockinfo.acquisitionerror"
        },
        {
          "ErrorEquals": [
            "DynamoDB.ConditionalCheckFailedException"
          ],
          "Next": "Get Current Lock Record",
          "ResultPath": "$.lockinfo.acquisitionerror"
        }
      ],
      "Next": "Query Block Batch",
      "ResultPath": null
    },
    "Initialize Lock Item": {
      "Comment": "This state handles the case where an item hasn't been created for this lock yet. In that case, it will insert an initial item that includes the lock name as the key and currentlockcount of 0. The Put to DynamoDB includes a conditonal expression to fail if the an item with that key already exists, which avoids a race condition if multiple executions start at the same time. There are other reasons that the previous state could fail and end up here, so this is safe in those cases too.",
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${TableSemaphore}",
        "Item": {
          "LockName": {
            "S": "${LockName}"
          },
          "currentlockcount": {
            "N": "0"
          }
        },
        "ConditionExpression": "LockName <> :lockname",
        "ExpressionAttributeValues": {
          ":lockname": {
            "S": "${LockName}"
          }
        }
      },
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Acquire Lock",
          "ResultPath": "$.error"
        }
      ],
      "Next": "Acquire Lock",
      "ResultPath": null
    },
    "Get Current Lock Record": {
      "Comment": "This state is called when the execution is unable to acquire a lock because there limit has either been exceeded or because this execution already holds a lock. I that case, this task loads info from DDB for the current lock item so that the right decision can be made in subsequent states.",
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${TableSemaphore}",
        "ExpressionAttributeNames": {
          "#lockownerid.$": "$$.Execution.Id"
        },
        "Key": {
          "LockName": {
            "S": "{$LockName}"
          }
        },
        "ProjectionExpression": "#lockownerid"
      },
      "ResultSelector": {
        "Item.$": "$.Item",
        "ItemString.$": "States.JsonToString($.Item)"
      },
      "ResultPath": "$.lockinfo.currentlockitem",
      "Next": "Check If Lock Already Acquired"
    },
    "Check If Lock Already Acquired": {
      "Comment": "This state checks to see if the current execution already holds a lock. It can tell that by looking for Z, which will be indicative of the timestamp value. That will only be there in the stringified version of the data returned from DDB if this execution holds a lock.",
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.lockinfo.currentlockitem.ItemString",
              "IsPresent": true
            },
            {
              "Variable": "$.lockinfo.currentlockitem.ItemString",
              "StringMatches": "*Z*"
            }
          ],
          "Next": "Continue Because Lock Was Already Acquired"
        }
      ],
      "Default": "Wait"
    },
    "Wait": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "Acquire Lock",
      "Comment": "Allow some time for other running state machines to release their lock before we attempt to grab a lock again."
    },
    "Continue Because Lock Was Already Acquired": {
      "Comment": "In this state, we have confimed that lock is already held, so we pass the original execution input into the the function that does the work.",
      "Type": "Pass",
      "Next": "Query Block Batch"
    },
    "Query Block Batch": {
      "Type": "Task",
      "Next": "Are There Blocks to Upload?",
      "Parameters": {
        "TableName": "${TableBlocks}",
        "Limit": 1,
        "KeyConditionExpression": "BlockBatch = :batch_id",
        "ExpressionAttributeValues": {
          ":batch_id": {
            "S.$": "$.detail.blockBatch"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.block_batch",
      "Retry": [
        {
          "ErrorEquals": [
            "DynamoDB.AmazonDynamoDBException"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 2,
          "MaxAttempts": 10
        }
      ]
    },
    "Are There Blocks to Upload?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.block_batch.Count",
          "NumericEquals": 0,
          "Next": "Release Lock"
        }
      ],
      "Default": "UploadNotionBlocks"
    },
    "Fail": {
      "Type": "Fail",
      "Comment": "This state is reached if the upload task throws an error. It's expected that the 'cleanup' state machine will clean the dangling lock which is left when this state is reached."
    },
    "UploadNotionBlocks": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${UploadFunction}",
        "Payload": {
          "BlockBatch.$": "$.block_batch.Items[0].BlockBatch.S"
        }
      },
      "Next": "Query Block Batch",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "Comment": "Lambda function failure.",
          "Next": "Fail"
        }
      ],
      "Comment": "Does the actual work of uploading the blocks stored in the blocks table to Notion. The Lambda function which underpins this task is expected to be called in a loop, for as long as there are blocks in the table. The function will process a fixed number of blocks and then exit at which point this state will loop back to tasting the blocks table looking for more work to feed into another invocation of the Lambda",
      "ResultPath": null
    },
    "Release Lock": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${TableSemaphore}",
        "Key": {
          "LockName": {
            "S": "${LockName}"
          }
        },
        "ExpressionAttributeNames": {
          "#currentlockcount": "currentlockcount",
          "#lockownerid.$": "$$.Execution.Id"
        },
        "ExpressionAttributeValues": {
          ":decrease": {
            "N": "1"
          }
        },
        "UpdateExpression": "SET #currentlockcount = #currentlockcount - :decrease REMOVE #lockownerid",
        "ConditionExpression": "attribute_exists(#lockownerid)",
        "ReturnValues": "UPDATED_NEW"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "DynamoDB.ConditionalCheckFailedException"
          ],
          "MaxAttempts": 0
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 5,
          "BackoffRate": 1.5
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "DynamoDB.ConditionalCheckFailedException"
          ],
          "Next": "Success State",
          "ResultPath": "$.error"
        }
      ],
      "ResultPath": null,
      "Next": "Success State"
    },
    "Success State": {
      "Type": "Succeed"
    }
  }
}
